import os, math, gc
import numpy as N
import tomominer.io.file as IF
import scipy.ndimage as SN
from scipy.ndimage.filters import gaussian_filter as SNFG
import warnings
warnings.filterwarnings("ignore")
import tomominer.geometry.rotate as GR

# Here I have to rotate subtomograms as per angles generated by alignment code which is written by Min. So I have to use same code for rotation as used by Min.
def eulerAnglesToRotationMatrix(theta):
    R_x = N.array([[1,         0,                  0                   ],
                    [0,         math.cos(theta[0]), -math.sin(theta[0]) ],
                    [0,         math.sin(theta[0]), math.cos(theta[0])  ]])

    R_y = N.array([[math.cos(theta[1]),    0,      math.sin(theta[1])  ],
                    [0,                     1,      0                   ],
                    [-math.sin(theta[1]),   0,      math.cos(theta[1])  ]])

    R_z = N.array([[math.cos(theta[2]),    -math.sin(theta[2]),    0],
                    [math.sin(theta[2]),    math.cos(theta[2]),     0],
                    [0,                     0,                      1]])

    R = N.dot(R_z, N.dot( R_y, R_x ))
    del R_x, R_y, R_z
    return R

def cluster_averaging_local(self, data_json, return_key=True):
    vol_sum = None
    mask_sum = None
    for i, rec in enumerate(data_json):
        if not os.path.isfile(rec['subtomogram']):  continue
        # Rotate volume
        v = IF.get_mrc(rec['subtomogram'])
        v_r = GR.rotate_pad_mean(v, angle=rec["angle"], loc_r=rec["loc"])
        # Rotate mask
        vm = IF.get_mrc(rec['mask'])
        vm_r = GR.rotate_mask(vm, angle=rec["angle"])
        
        if vol_sum is None:
            vol_sum = N.zeros(v_r.shape, dtype=N.float64, order='F')
        vol_sum += v_r
        if mask_sum is None:
            mask_sum = N.zeros(vm.shape, dtype=N.float64, order='F')
        mask_sum += vm_r
        del v, v_r, vm, vm_r
    
    gc.collect()
    re = {'vol_sum':vol_sum, 'mask_sum':mask_sum, 'vol_count':len(data_json)}
    if return_key:
        re_key = self.cache.save_tmp_data(re, fn_id=self.task.task_id)
        assert re_key is not None
        return {'key':re_key}
    else:
        return re
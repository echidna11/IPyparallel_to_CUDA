#!/usr/bin/env python




'''
export sfsc scores for ploting histogram using R

IMPORTANT: the sfsc scores are normalized, because the score distribution for different groups are different

~/ln/tomominer/tomominer/pursuit/multi/analysis/statistics/collect_fsc_across_multiple_experiments__mpp_all__plot.py
'''



import json, csv
import cPickle as pickle

import numpy as N


def main():

    with open('collect_fsc_across_multiple_experiments__mpp_all__plot__op.json') as f:         op = json.load(f)

    with open(op['mpp_all_in'], 'rb') as f:         fsc_mpp = pickle.load(f)          # sfsc scores of all patterns generated by MPP, these scores will be background scores for plotting histogram
    
    # collect MPP sfsc scores for plotting histogram, they are to be normalized
    fms = {}
    for fn in fsc_mpp:
        fmt = fsc_mpp[fn]
        fmst = []

        for pi in fmt:
            fmtt = fmt[pi]

            for c in fmtt:
                fmttt = fmtt[c]

                fmst.append(fmttt['fsc_sum'])
                
        fms[fn] = N.array(fmst)



    with open(op['sel_in']) as f:        # normally collect_fsc_across_multiple_experiments__out-selected.csv, which is the manually selected
        cr = csv.reader(f)
        fsc_sel = [[__ for __ in _] for _ in cr]

    fsc_sel_dict = {}
    for row in fsc_sel:
        avg_k = row[2]
        fsc_sum = float(row[0])
        fsc_sel_dict[avg_k] = fsc_sum


    with open(op['collect_in'], 'rb') as f:     fsc_collect = pickle.load(f)

    # need to construct a mapping from individual average file to the corresponding MPP file stat file
    avg_batch_dict = {}
    for fn in fsc_collect:
        for c in fsc_collect[fn]:
            avg_batch_dict[fsc_collect[fn][c]['template']['subtomogram']] = fn

   
    # collect scores for selected averages 
    fms_sel = {}
    for avg_k in fsc_sel_dict:
        fn = avg_batch_dict[avg_k]
        if fn not in fms_sel:       fms_sel[fn] = []
        fms_sel[fn].append(fsc_sel_dict[avg_k])


    with open(op['mpp_all_out'], 'w') as f:
        cw = csv.writer(f)
 
        for fn in fms_sel:
            if fn not in fms:       continue
            fsc_t = N.copy(fms[fn])
            if op['normalize']:                fsc_t = (fsc_t - fsc_t.mean()) / fsc_t.std()
            cw.writerows(N.reshape(fsc_t, (-1,1)).tolist())


    with open(op['sel_out'], 'w') as f:
        cw = csv.writer(f)
        for fn in fms_sel:
            if fn not in fms:       continue
            if op['normalize']:
                fsc_t = (N.array(fms_sel[fn]) - fms[fn].mean()) / fms[fn].std()
            else:
                fsc_t = N.array(fms_sel[fn])

            cw.writerows(N.reshape(fsc_t, (-1,1)).tolist())



if __name__ == '__main__':
    main()






'''

# R code for plotting

mpp_all = read.csv('/tmp/collect_fsc_across_multiple_experiments__mpp_all__out__mpp_all.csv', row.names=NULL, check.names=FALSE)
mpp_all = mpp_all[,1]

sel = read.csv('/tmp/collect_fsc_across_multiple_experiments__mpp_all__out__sel.csv', row.names=NULL, check.names=FALSE)
sel = sel[,1]

setEPS()
postscript("collect_fsc_across_multiple_experiments__mpp_all__out__histogram.eps")
hist(mpp_all)
#lines(density(mpp_all, bw=.5), col='yellow', lwd=2)
points(sel, rep(0, length(sel)), col='blue')
dev.off()


'''

